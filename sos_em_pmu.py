# -*- coding: utf-8 -*-
"""SOS em PMU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wFvZ2xEQb2DzSmxrRlW5Bpt7wfmso1xz

**Teste para o Problema de Alocação de PMUs em Simbiotic Organism Search**
"""

import numpy as np
import random

def objective_function(x, c, D):
    """
    Calcula o valor objetivo para um indivíduo x, dadas as matrizes c e D.
    """
    n = len(x)
    obj = 0
    for i in range(n-1):
        if x[i] == 1:
            obj += c[i]
            for j in range(n-1):
                if x[j] == 1:
                    obj += D[i,j]
    return obj

def initial_population(size, n):
    """
    Gera uma população inicial de size indivíduos, onde cada indivíduo tem n genes.
    """
    population = []
    for i in range(size):
        individual = np.zeros(n, dtype=int)
        indices_aleatorios = np.random.choice(n, 4, replace=False)  # escolhe 4 índices aleatórios sem substituição
        individual[indices_aleatorios] = 1  # atribui valor 1 aos índices aleatórios selecionados
        population.append(individual)
    return population

def symbiotic_organism_search(c, D, size=20, generations=50, p=0.5, alpha=0.5):
    """
    Executa o algoritmo Symbiotic Organism Search para o problema de alocação de PMUs.
    """
    n = len(c)
    population = initial_population(size, n)
    for g in range(generations):
        print(f"Generation: {g+1}", end=" ")
        for i in range(size):
            x = population[i]
            for j in range(size):
                if i != j:
                    y = population[j]
                    z = np.copy(x)
                    for k in range(n):
                        r = random.random()
                        if r < p:
                            z[k] = x[k] + int(alpha * (y[k] - x[k]))
                            z[k] = min(max(z[k], 0), 1)
                    if objective_function(z, c, D) < objective_function(x, c, D):
                        population[i] = z
            print(f"Best objective value: {objective_function(population[i], c, D)}", end=" ")
        print()
    best_index = np.argmin([objective_function(x, c, D) for x in population])
    return population[best_index]

# Exemplo de uso
c = np.array([2, 3, 4, 5, 6])
D = np.array([[0, 1, 2, 3, 4],
              [1, 0, 1, 2, 3],
              [2, 1, 0, 1, 2],
              [3, 2, 1, 0, 1],
              [4, 3, 2, 1, 0]])

best_organism = symbiotic_organism_search(c, D)

print("Best organism:", best_organism)
print("Best objective value:", objective_function(best_organism, c, D))

"""Teste para o caso IEEE14"""

c = np.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1])
D = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1],
              [1,1,1,1,1,1,1,2,1,1,1,1,1,1],
              [2,1,2,1,1,1,1,2,1,2,2,2,1,2],
              [2,1,2,1,1,1,2,3,1,2,2,2,2,2],
              [3,3,3,1,2,2,2,3,2,2,2,3,2,2],
              [4,3,3,2,2,2,2,3,2,2,2,3,2,2],
              [4,4,4,2,2,2,3,4,2,3,3,3,3,2],
              [4,4,4,3,2,2,3,4,2,3,3,3,3,3],
              [4,5,5,3,2,3,3,4,2,3,3,3,3,3],
              [4,5,5,4,2,3,4,5,3,3,3,4,3,3],
              [5,5,5,4,3,3,4,5,3,3,3,4,3,3],
              [5,5,5,4,3,3,5,6,3,4,4,4,4,4],
              [6,5,5,5,4,4,5,6,3,4,5,5,5,4]])


best_organism = symbiotic_organism_search(c, D)

print("Best organism:", best_organism)
print("Best objective value:", objective_function(best_organism, c, D))